import 'dart:typed_data';

import 'package:flutter_map/src/layer/modern_tile_layer/base_tile_data.dart';
import 'package:flutter_map/src/layer/modern_tile_layer/base_tile_loader.dart';
import 'package:flutter_map/src/layer/modern_tile_layer/options.dart';
import 'package:flutter_map/src/layer/modern_tile_layer/tile_loader/source_generators/xyz.dart';
import 'package:flutter_map/src/layer/modern_tile_layer/tile_loader/source_tile_generators.dart';
import 'package:flutter_map/src/layer/modern_tile_layer/tile_loader/tile_generators/raster/generator.dart';
import 'package:flutter_map/src/layer/tile_layer/tile_coordinates.dart';
import 'package:meta/meta.dart';

/// Default implementation of a tile loader, which delegates loading of tile
/// data to two seperate stages:
///
///  1. The [sourceGenerator] uses a tile's [TileCoordinates] & the ambient
///     [TileLayerOptions] to generate an object, describing the tile's 'source'
///     ([S])
///
///  2. The [tileGenerator] uses this 'source' to generate an output
///     [BaseTileData] ([D])
@immutable
final class TileLoader<S extends Object?, D extends BaseTileData>
    implements BaseTileLoader<D> {
  /// Generates a 'source' ([S]) for a tile given its [TileCoordinates] & the
  /// ambient [TileLayerOptions]
  ///
  /// For example, see [XYZSourceGenerator].
  final SourceGenerator<S> sourceGenerator;

  /// Generates a tile's data ([D]) based on the 'source' generated by
  /// [sourceGenerator]
  ///
  /// For example, see [RasterTileGenerator].
  final TileGenerator<S, D> tileGenerator;

  /// Create a tile loader from a source generator & tile generator.
  const TileLoader({
    required this.sourceGenerator,
    required this.tileGenerator,
  });

  @override
  D call(TileCoordinates coordinates, TileLayerOptions options) =>
      tileGenerator(sourceGenerator(coordinates, options));

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TileLoader &&
          other.tileGenerator == tileGenerator &&
          other.sourceGenerator == sourceGenerator);

  @override
  int get hashCode => Object.hash(sourceGenerator, tileGenerator);

  /// [Uint8List] that forms a fully transparent image.
  static final transparentImage = Uint8List.fromList([
    0x89,
    0x50,
    0x4E,
    0x47,
    0x0D,
    0x0A,
    0x1A,
    0x0A,
    0x00,
    0x00,
    0x00,
    0x0D,
    0x49,
    0x48,
    0x44,
    0x52,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x01,
    0x08,
    0x06,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x15,
    0xC4,
    0x89,
    0x00,
    0x00,
    0x00,
    0x0A,
    0x49,
    0x44,
    0x41,
    0x54,
    0x78,
    0x9C,
    0x63,
    0x00,
    0x01,
    0x00,
    0x00,
    0x05,
    0x00,
    0x01,
    0x0D,
    0x0A,
    0x2D,
    0xB4,
    0x00,
    0x00,
    0x00,
    0x00,
    0x49,
    0x45,
    0x4E,
    0x44,
    0xAE,
    0x42,
    0x60,
    0x82,
  ]);
}
