import 'package:flutter_map/src/layer/modern_tile_layer/tile_loader/source_fetchers/bytes_fetchers/bytes_fetcher.dart';
import 'package:flutter_map/src/layer/modern_tile_layer/tile_loader/source_generator_fetcher.dart';

/// Default tile source, which supports a primary URI & potential fallback URIs.
///
/// Iterating this will first yield the [primaryUri], followed by any
/// [fallbackUris] in order.
///
/// Generated by the default [TileSourceGenerator]s. Consumed by the default
/// [SourceBytesFetcher]s as a standard [Iterable]. [TileSourceFetcher]s may
/// use this as a key for short-term caching, asssuming the following conditions
/// are met...
///
/// To enable short-term caching and ensure it is accurate, this object's
/// equality depends only on the [primaryUri].
///
/// > [!WARNING]
/// > If in use, [SourceBytesFetcher]s should not allow re-use of any generated
/// > resources from [fallbackUris] (as the wrong resource would be cached under
/// > the [primaryUri]) .
class TileSource extends Iterable<String> {
  /// Primary URI of the tile.
  final String primaryUri;

  /// Lazily generated URIs of the tile which may be used in the event that the
  /// [primaryUri] cannot be used to retrieve the tile.
  ///
  /// This is not included in the equality of this object. See the documentation
  /// on this class for more info.
  ///
  /// This may be empty or not provided.
  final Iterable<String>? fallbackUris;

  /// Default tile source, which supports a primary URI & potential fallback
  /// URIs.
  const TileSource(this.primaryUri, {this.fallbackUris});

  @override
  int get hashCode => primaryUri.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TileSource && primaryUri == other.primaryUri);

  @override
  Iterator<String> get iterator =>
      _TileSourceIterator(primaryUri, fallbackUris?.iterator);
}

class _TileSourceIterator implements Iterator<String> {
  String? _current;
  final String primaryUri;
  final Iterator<String>? fallbackUris;

  _TileSourceIterator(this.primaryUri, this.fallbackUris);

  @override
  bool moveNext() {
    if (_current == null) {
      _current = primaryUri;
      return true;
    }
    if (fallbackUris == null || !fallbackUris!.moveNext()) {
      _current = null;
      return false;
    }
    _current = fallbackUris!.current;
    return true;
  }

  @override
  String get current => _current!;
}
